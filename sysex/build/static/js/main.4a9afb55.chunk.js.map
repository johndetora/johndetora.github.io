{"version":3,"sources":["components/MidiPort.js","App.js","index.js"],"names":["MidiPorts","props","WebMidi","enable","err","console","log","inputs","outputs","inputPort","getInputByName","outputPort","getOutputByName","setInput","setOutput","className","onChange","e","map","port","name","id","App","useState","items","setItems","input","output","setResponse","receiveSysex","target","addListener","hex","data","el","toString","length","toUpperCase","response","join","result","item","index","findResult","clickHandler","parseInt","value","filter","cell","sysex","split","splice","message","Number","send","type","file","fileReader","FileReader","readAsArrayBuffer","onload","bufferArray","worksheet","XLSX","Sheets","sheet_to_json","header","sheetObj","sysexMatch","i","push","test","description","expected","match","onlySysex","readExcel","files","MidiPort","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a9afb55.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport WebMidi from 'webmidi';\n\nconst MidiPorts = props => {\n    WebMidi.enable(function (err) {\n        // If midi ports aren't found, log error\n        if (err) console.log('WebMidi could not be enabled.', err);\n        // Otherwise log available midi ports\n        console.log(WebMidi.inputs);\n        console.log(WebMidi.outputs);\n        let inputPort = WebMidi.getInputByName('LPK25 mk2');\n        let outputPort = WebMidi.getOutputByName('LPK25 mk2');\n        props.setInput(inputPort);\n        props.setOutput(outputPort);\n    }, true);\n    return (\n        <div>\n            <span>Input Port: </span>\n            <select className='ports' onChange={e => console.log(e)}>\n                {WebMidi.inputs.map(port => (\n                    <option key={port.id}>{port.name}</option>\n                ))}\n            </select>\n\n            <span className='output'>Output Port: </span>\n            <select className='ports'>\n                {WebMidi.outputs.map(port => (\n                    <option key={port.id}>{port.name}</option>\n                ))}\n            </select>\n        </div>\n    );\n};\n\nexport default MidiPorts;\n","import React, { useState, useEffect } from 'react';\nimport * as XLSX from 'xlsx';\nimport WebMidi from 'webmidi';\nimport MidiPorts from './components/MidiPort';\nimport './App.css';\n\nfunction App() {\n    const [items, setItems] = useState([]);\n    const [input, setInput] = useState();\n    const [output, setOutput] = useState();\n    const [response, setResponse] = useState(null);\n    const [currentIndex, setCurrentIndex] = useState();\n\n    const readExcel = file => {\n        const fileReader = new FileReader();\n        fileReader.readAsArrayBuffer(file);\n        fileReader.onload = e => {\n            const bufferArray = e.target.result;\n            const wb = XLSX.read(bufferArray, { type: 'buffer' });\n            const worksheet = wb.Sheets['Sysex'];\n            const data = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n            let sheetObj = [];\n            const sysexMatch = /F0(.*?)F7/gm;\n            for (let i = 0; i < data.length; i++) {\n                sheetObj.push({ index: i, test: data[i][0], description: data[i][1], expected: data[i][2], sysex: null, result: '' });\n            }\n\n            // Assign sysex property to regexed sysex\n            for (let i = 0; i < sheetObj.length; i++) {\n                console.log(sheetObj[i]);\n                if (typeof sheetObj[i].description === 'string') {\n                    sheetObj[i].sysex = sheetObj[i].description.match(sysexMatch);\n                }\n            }\n            const onlySysex = sheetObj.filter(cell => cell.sysex !== null);\n\n            // Reassign index\n            for (let i = 0; i < onlySysex.length; i++) {\n                onlySysex[i].index = i;\n            }\n            setItems(onlySysex);\n        };\n    };\n\n    // WebMidi.enable(function (err) {\n    //     // If midi ports aren't found, log error\n    //     if (err) console.log('WebMidi could not be enabled.', err);\n    //     // Otherwise log available midi ports\n    //     console.log(WebMidi.inputs);\n    //     console.log(WebMidi.outputs);\n\n    //     setInput(WebMidi.getInputByName('LPK25 mk2'));\n    //     setOutput(WebMidi.getOutputByName('LPK25 mk2'));\n    //     console.log('midi input:' + input);\n    //     console.log('midi output: ' + output);\n\n    //     // sendSysex(output);\n    // }, true);\n\n    function receiveSysex(target) {\n        input.addListener('sysex', 'all', function (e) {\n            // console.log('midi received');\n            //TODO: add a conditional to check if a response is expected and if successful\n            const reply = [...e.data];\n            // setResponse\n\n            // Convert to hex\n            const hex = reply.map(el => {\n                el = el.toString(16) + ' ';\n                if (el.length === 2) el = '0' + el;\n                return el.toUpperCase();\n            });\n\n            setResponse(hex);\n            findResult(target, hex);\n\n            //TODO: make sure this actually means the message was received\n            // console.log('message received');\n            // hexConversion(response);\n        });\n    }\n    const clickHandler = e => {\n        // const message = [];\n        console.log(e.target.id);\n        const target = parseInt(e.target.id);\n        // Finds cell sysex message based on the target ID, which matches the index\n        const value = items\n            .filter(cell => cell.index === target)\n            .map(cell => cell.sysex)\n            .join(' ') // converts it into string\n            .split(' '); // converts it into array, but seperated by byte\n\n        value.splice(0, 1);\n        // converts bytes into integer that's readable by computer,\n        const message = value.map(el => {\n            el = '0x' + el;\n            return parseInt(Number(el, 10));\n        });\n        console.log('sent:');\n        console.log(message);\n        output.send(0xf0, message);\n        receiveSysex(target);\n    };\n\n    function findResult(target, response) {\n        response = response.join('');\n        console.log(response);\n        const result = items.map(item => {\n            if (item.index === target) {\n                item.result += response;\n            }\n            return item;\n        });\n        console.log(result);\n        setItems(result);\n\n        // let itemsCopy = Object.assign({}, items);\n        // itemsCopy[target].result = response;\n        // setItems(itemsCopy);\n        // console.log(itemsCopy);\n        // setItems(itemsCopy);\n        // const array = [...obj, obj.forEach(el => el.index = 1)]\n\n        // setItems(prevState => ({\n        //     ...prevState,\n        //     {[target]: response}\n        // }));\n        // console.log(setItems(items => (items[target].result = 'foo')));\n        // const result = items.map(item => {\n        //     if (item.index === target) {\n        //         // setItems(prevState => ({\n        //         //     ...prevState,\n        //         //     ...result,\n        //         // }));\n        //         return (item.result = response);\n        //     }\n        // });\n        // setItems(items => result);\n    }\n\n    return (\n        <div className='container'>\n            <div className='utilities'>\n                <input\n                    type='file'\n                    className='file'\n                    onChange={e => {\n                        const file = e.target.files[0];\n                        readExcel(file);\n                    }}\n                />\n                <MidiPorts setInput={setInput} setOutput={setOutput} input={input} output={output} />\n            </div>\n            <table className='table-container'>\n                <thead>\n                    <tr>\n                        {/*TODO: make these propereties that show up only once loaded */}\n                        <th>Test</th>\n                        <th>Sysex</th>\n                        <th>Expected</th>\n                        <th>Result</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {items.map(data => (\n                        <tr key={data.index}>\n                            <td>{data.test}</td>\n                            <td className='description'>{data.description}</td>\n\n                            <td className='expected-container'>\n                                <div className='expected'>\n                                    {data.expected}\n                                    <button className='send-button' id={data.index} value={data.sysex} onClick={clickHandler}>\n                                        test{' '}\n                                    </button>\n                                </div>\n                            </td>\n                            <td className='results'>{data.result}</td>\n                            {/* <td>{response}</td> */}\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}