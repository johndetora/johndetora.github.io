{"version":3,"sources":["components/MidiPorts.js","components/ReadExcel.js","components/ExportExcel.js","components/Window.js","components/HelpButton.js","components/CopyButton.js","components/SendButton.js","App.js","index.js"],"names":["MidiPorts","props","WebMidi","enable","err","alert","inputPort","inputs","outputPort","outputs","setInput","setOutput","className","onChange","e","getInputByName","target","value","map","port","id","name","getOutputByName","ExcelReader","useState","showSheets","sheetNames","setSheetNames","sheet","type","file","fileReader","FileReader","readAsArrayBuffer","regEx","onload","test","bufferArray","result","wb","XLSX","SheetNames","worksheet","Sheets","data","sheet_to_json","header","sheetObj","MAX","length","i","push","index","behavior","sysex","expected","expectedLength","response","responseLength","passFail","setItems","console","log","table","setHelp","help","onerror","abort","readExcel","files","ExportExcel","newWorkBook","book_new","resultsSheet","json_to_sheet","book_append_sheet","onClick","Window","href","HelpButton","CopyButton","dataLength","copied","setCopied","text","join","navigator","clipboard","writeText","SendButton","sent","setSent","App","items","input","output","viewHelp","setViewHelp","clickHandler","parseInt","message","split","el","Number","statusByte","splice","fullMsg","send","addListener","reply","groupEnd","removeListener","prev","newitems","entry","byteComparison","updateData","toString","toUpperCase","decimalToHex","receiveSysex","group","undefined","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.710479af.chunk.js","sourcesContent":["import React from 'react';\nimport WebMidi from 'webmidi';\nimport '../App.css';\nconst MidiPorts = props => {\n    WebMidi.enable(function (err) {\n        // If midi ports aren't found, log error\n        if (err) alert('WebMidi could not be enabled.', err);\n        let inputPort = WebMidi.inputs[0]; //WebMidi.getInputByName(inputEl.value);\n        let outputPort = WebMidi.outputs[0];\n        props.setInput(inputPort);\n        props.setOutput(outputPort);\n    }, true);\n\n    return (\n        <div className='midi-ports'>\n            <div>\n                <span className='port-label'>Input Port: </span>\n                <select\n                    className='ports input-ports'\n                    onChange={e => {\n                        props.setInput(WebMidi.getInputByName(e.target.value));\n                    }}\n                >\n                    {WebMidi.inputs.map(port => (\n                        <option key={port.id} id={port.id}>\n                            {port.name}\n                        </option>\n                    ))}\n                </select>\n            </div>\n            <div>\n                <span className='port-label'>Output Port: </span>\n                <select\n                    className='ports output-ports'\n                    onChange={e => {\n                        props.setOutput(WebMidi.getOutputByName(e.target.value));\n                    }}\n                >\n                    {WebMidi.outputs.map(port => (\n                        <option key={port.id}>{port.name}</option>\n                    ))}\n                </select>\n            </div>\n        </div>\n    );\n};\n\nexport default MidiPorts;\n","import React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\nimport '../App.css';\n\n//TODO: add more error handling. for instance, if the loaded excel sheet doesn't look right, take user through putting in the name of the sheet, the index of the first cell, etc.\n//TODO: add window component that shows the worksheet names\nfunction ExcelReader(props) {\n    const [showSheets, setShowSheets] = useState(false);\n    const [sheetNames, setSheetNames] = useState([]);\n\n    function readExcel(file) {\n        const fileReader = new FileReader();\n        fileReader.readAsArrayBuffer(file);\n        let regEx = /xlsx$/;\n\n        fileReader.onload = e => {\n            if (regEx.test(file.name) === false) {\n                alert('ERROR: Incompatible file type.  Please upload a file with an extension of .xlsx');\n                return;\n            }\n\n            // const sheetName = 'SysEx';\n            const bufferArray = e.target.result;\n            const wb = XLSX.read(bufferArray, { type: 'buffer' });\n            // Set variables\n            setSheetNames(wb.SheetNames);\n            // setShowSheets(true);\n            // const sheetName = prompt('Please enter the name of the sheet');\n            //const worksheet = wb.Sheets[sheetName];\n            const worksheet = wb.Sheets['SysEx'];\n\n            // console.log(wb.Sheets);\n            // console.log('worksheet', worksheet);\n            const data = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n\n            // Uncomment to see how we're parsing the data below\n            // console.table('data', data);\n\n            let sheetObj = [];\n            const MAX = data.length;\n            let start = 3; // Start of the actual data\n\n            for (let i = start; i < MAX; i++) {\n                sheetObj.push({\n                    index: i - start,\n                    name: data[i][0],\n                    port: data[i][1],\n                    test: data[i][2],\n                    behavior: data[i][3],\n                    sysex: data[i][4],\n                    expected: data[i][5],\n                    expectedLength: null,\n                    response: '',\n                    responseLength: null,\n                    passFail: null,\n                });\n            }\n\n            // Set state\n            props.setItems(sheetObj);\n\n            // Log output\n            console.log('Worksheet load successful');\n            console.table(sheetObj);\n            props.setHelp(!props.help);\n        };\n\n        fileReader.onerror = e => {\n            alert('unknown error. please retry');\n            fileReader.abort();\n        };\n    }\n\n    return (\n        <>\n            {showSheets\n                ? sheetNames.map(sheet => (\n                      <div>\n                          <div>{sheet}</div>\n                      </div>\n                  ))\n                : ''}\n            <label className='button'>\n                Import Sheet\n                <input\n                    type='file'\n                    className='file'\n                    onChange={e => {\n                        const file = e.target.files[0];\n                        readExcel(file);\n                    }}\n                />\n            </label>\n        </>\n    );\n}\n\nexport default ExcelReader;\n","import React from 'react';\nimport * as XLSX from 'xlsx';\nimport '../App.css';\n\nfunction ExportExcel(props) {\n    // This is the 'items' state, the full data object\n    let newWorkBook = XLSX.utils.book_new(); // create new workbook\n    let resultsSheet = XLSX.utils.json_to_sheet(props.data); //can also use XLSX.utils.sheet_add_json to add to existing\n    XLSX.utils.book_append_sheet(newWorkBook, resultsSheet, 'Sysex Results'); // Add new worksheet to new workbook\n\n    // https://www.youtube.com/watch?v=tKz_ryychBY&list=PLQ9Y_YUSECCg0uiQR-Uj8E2a8fxTelcNB&index=3&t=1197s\n    return (\n        <div>\n            {/* skipHeader: false if we want to remove the header */}\n            <button className='button' onClick={() => XLSX.writeFile(newWorkBook, 'sysex-results.xlsx')}>\n                Export to New Sheet\n            </button>\n        </div>\n    );\n}\n\nexport default ExportExcel;\n","import React from 'react';\n\nfunction Window() {\n    // This will show when the page is loaded.  once a file is imported, it can be accessed via the help button\n    return (\n        <div className='window'>\n            <section className='window__header'>\n                <h4>Welcome to Sysex Tester 9</h4>\n                <p>\n                    Sysex T9 will import your excel sheets and parse the cells for sysex data, where you will be able to send the messages to your\n                    MIDI device while monitoring the response.\n                </p>\n                ________________\n            </section>\n            <section className='window__content'>\n                <p> To use Sysex T9: </p>\n                <p>\n                    {' '}\n                    1. Create an excel sheet based on{' '}\n                    <a href='.' target='_blank'>\n                        this template\n                    </a>\n                </p>\n                <p>\n                    2. Click the Import Sheet button. NOTE: This menu will disappear once a sheet is imported. Access this window again by clicking\n                    [help]{' '}\n                </p>\n                <p>3. Make sure your Input and Output Ports are set to the proper MIDI Device </p>\n                <p> 4. Click Send to send each Sysex message. If the message is successful, the response will be written to the Response cell. </p>\n                <p>\n                    5. Along with the Sysex response message, the amount of bytes sent and received will be written and compared. <br />\n                    If the number of bytes of the response matches the expected number of bytes, the message will be colored green. If the incorrect\n                    amount of bytes are received, the message will be colored red.\n                </p>\n                <p>6. Once finished, [Export to New Sheet] and save the results to your system</p>\n                ________________\n            </section>\n            <section className='window__footer'>\n                <p />\n                If you want to see more data while operating Sysex T9:\n                <p />\n                1. Open up the console on your browser by right clicking anywhere and clicking [Inspect].\n                <p />\n                2. Click on the [Console] tab to get readouts of the data being sent and received.\n                <p />\n                If you want to access this menu again, press the [help] button at any time.\n                <p />\n            </section>\n        </div>\n    );\n}\n\nexport default Window;\n","import { React, useState } from 'react';\nimport Window from './Window';\n\nfunction HelpButton({ help, setHelp }) {\n    return (\n        <>\n            <button className='button help-button' onClick={() => setHelp(!help)}>\n                help\n            </button>\n        </>\n    );\n}\n\nexport default HelpButton;\n","// Copy to clipboard\nimport React, { useState } from 'react';\n\nfunction CopyButton({ data, dataLength }) {\n    const [copied, setCopied] = useState('copy');\n\n    function copyText(e) {\n        const text = `${data.join('')}  ${dataLength} bytes`;\n\n        const clipboard = navigator.clipboard;\n\n        if (!navigator.clipboard) {\n            return;\n        }\n        navigator.clipboard.writeText(text);\n        setCopied('copied');\n    }\n\n    return (\n        <div className='copy__container'>\n            <button className={copied === 'copy' ? 'copy button' : 'copy button button__active'} onClick={copyText}>\n                {copied}\n            </button>\n        </div>\n    );\n}\n\nexport default CopyButton;\n","import React, { useState } from 'react';\n\nfunction SendButton(props) {\n    const [sent, setSent] = useState(false);\n\n    return (\n        <>\n            <button\n                className={sent ? 'button send-button sent' : 'button send-button'}\n                id={props.id}\n                onClick={e => {\n                    props.onClick(e);\n                    setSent(true);\n                }}\n            >\n                <span>{sent ? 'sent' : 'send'}</span>\n            </button>\n        </>\n    );\n}\n\nexport default SendButton;\n","import React, { useState } from 'react';\nimport MidiPorts from './components/MidiPorts';\nimport ExcelReader from './components/ReadExcel';\nimport ExportExcel from './components/ExportExcel';\nimport HelpButton from './components/HelpButton';\nimport Window from './components/Window';\nimport CopyButton from './components/CopyButton';\nimport SendButton from './components/SendButton';\nimport './Header.css';\nimport './App.css';\n\nfunction App() {\n    const [items, setItems] = useState([]);\n    const [input, setInput] = useState();\n    const [output, setOutput] = useState();\n    const [viewHelp, setViewHelp] = useState(true);\n\n    function clickHandler(e) {\n        const target = parseInt(e.target.id);\n\n        // e.target.innerText = 'sent';\n        // e.target.classList.add('sent');\n        // e.target.classList.add('sent');\n\n        console.log('click target', target);\n\n        // Finds cell sysex message based on the target ID, which matches the index\n        let msg = items[target].sysex;\n        let byteArray = msg.split(' ');\n\n        // Converts proper hex format, then to decimal so that message can be read by the computer\n        const message = byteArray.map(el => {\n            el = '0x' + el;\n            return parseInt(Number(el, 10));\n        });\n\n        // Get the status byte and remove it from the message while storing it in this variable\n        const statusByte = message.splice(0, 1);\n        const fullMsg = `${statusByte},${message}`;\n\n        // Do not send if output does not include the terminator byte\n        // if (!message.includes(247)) {\n        // return alert('Not a valid SysEx message');\n        // }\n        // Send to output if one is available\n\n        if (output) {\n            output.send(statusByte, message);\n            receiveSysex(target); // Full message is sent for easy logging\n            console.group('LOG');\n            console.log(`SENT ${fullMsg} (${fullMsg.length} bytes) to ${output.name} port`);\n        } else {\n            alert('No MIDI output port selected');\n        }\n    }\n\n    function receiveSysex(target) {\n        input.addListener('sysex', 'all', e => {\n            console.log(e);\n            const reply = [...e.data];\n            // Log I/O\n            if (!reply) alert('No SysEx received. Check MIDI Port');\n            // console.group('Success');\n            console.log(`RECEIVED ${reply} (${reply.length} bytes) at ${input.name} port`);\n            console.groupEnd('LOG');\n\n            if (reply) {\n                updateData(target, decimalToHex(reply));\n            }\n        });\n    }\n\n    function decimalToHex(reply) {\n        const converter = reply.map(el => {\n            el = el.toString(16) + ' ';\n            if (el.length === 2) el = '0' + el;\n            return el.toUpperCase();\n        });\n        return converter;\n    }\n\n    function byteComparison(message) {\n        return message.length;\n    }\n\n    function updateData(target, response) {\n        input.removeListener('sysex', 'all'); // Remove the event listener so that they aren't created every button press\n        console.log('update target', target);\n\n        setItems(prev => {\n            const newitems = prev.map(entry => {\n                if (entry.index === target) {\n                    entry.response = response;\n                    entry.expectedLength = entry.expected.split(' ').length;\n                    entry.responseLength = byteComparison(response);\n                }\n                if (entry.responseLength === entry.expectedLength) {\n                    entry.passFail = 'pass';\n                }\n                if (entry.responseLength !== entry.expectedLength) {\n                    entry.passFail = 'fail';\n                }\n                return entry;\n            });\n            target = null;\n            return newitems;\n        });\n    }\n\n    return (\n        <div className='container'>\n            <p className='title'>Sysex Tester v0.2.0</p>\n            <div className='utilities'>\n                <ExcelReader setItems={setItems} setHelp={setViewHelp} help={viewHelp} />\n                <ExportExcel data={items} />\n                <MidiPorts setInput={setInput} setOutput={setOutput} input={input} output={output} />\n                <HelpButton help={viewHelp} setHelp={setViewHelp} />\n            </div>\n            {viewHelp ? <Window /> : ''}\n            <div className='main-container'>\n                <table className='table-container'>\n                    <thead>\n                        <tr className={items.length > 2 ? 'table-header' : 'invisible'}>\n                            <th className='header__item'>Message Type</th>\n                            <th>Port</th>\n                            <th>Test</th>\n                            <th>Expected Behavior</th>\n                            <th>SysEx to Send</th>\n                            <th>Expected Response</th>\n                            <th>Response</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {items.map((data, index) => (\n                            <tr key={index} className={data.port === undefined ? 'table_section' : 'table_row'}>\n                                <td className='msg_name'>{data.name}</td>\n                                <td className='port'>{data.port}</td>\n                                {/* Sysex Column */}\n                                <td className='description'>{data.test}</td>\n                                <td className='behavior'>{data.behavior}</td>\n                                <td className='sysex-container'>\n                                    <div className={data.sysex ? 'sysex-cell' : 'invisible'}>\n                                        {data.sysex}\n                                        <SendButton id={index} onClick={clickHandler} />\n                                        {/* <button className={data.sysex ? 'send-button button' : 'invisible'} id={index} onClick={clickHandler}>\n                                            send{' '}\n                                        </button> */}\n                                    </div>\n                                </td>\n\n                                <td className='long expected'>\n                                    <div className='overflow'>\n                                        {data.expected}\n                                        <div className={data.passFail === 'pass' ? 'pass' : 'fail'}>\n                                            {data.expectedLength ? `Expected: ${data.expectedLength} bytes` : ''}\n                                        </div>\n                                    </div>\n                                </td>\n                                <td className='long response'>\n                                    <div className='overflow'>\n                                        {data.response}\n                                        <div className={data.passFail === 'pass' ? 'pass' : 'fail'}>\n                                            {data.responseLength ? `Response: ${data.responseLength} bytes` : ''}\n                                        </div>\n                                    </div>\n                                    {data.responseLength > 1 ? <CopyButton data={data.response} dataLength={data.responseLength} /> : undefined}\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n            <footer>© Copyright 2021 John DeTora. All rights reserved.</footer>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}