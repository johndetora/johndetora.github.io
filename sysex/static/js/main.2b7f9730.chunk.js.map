{"version":3,"sources":["components/MidiPort.js","components/ReadExcel.js","components/ExportExcel.js","components/Window.js","components/HelpButton.js","components/CopyButton.js","App.js","index.js"],"names":["MidiPorts","props","document","querySelector","WebMidi","enable","err","alert","inputPort","inputs","outputPort","outputs","setInput","setOutput","className","onChange","e","getInputByName","target","value","map","port","id","name","getOutputByName","ExcelReader","type","file","fileReader","FileReader","readAsArrayBuffer","regEx","onload","test","sheetName","prompt","bufferArray","result","worksheet","XLSX","Sheets","data","sheet_to_json","header","console","table","sheetObj","MAX","length","i","push","index","behavior","sysex","expected","expectedLength","response","responseLength","passFail","setItems","log","setHelp","help","onerror","abort","readExcel","files","ExportExcel","newWorkBook","book_new","resultsSheet","json_to_sheet","book_append_sheet","onClick","Window","href","HelpButton","CopyButton","dataLength","useState","copied","setCopied","text","join","navigator","clipboard","writeText","App","items","input","output","viewHelp","setViewHelp","count","setCount","clickHandler","parseInt","message","split","el","Number","statusByte","splice","fullMsg","send","addListener","reply","groupEnd","item","group","indexOf","byteComparison","updateData","receiveSysex","MidiPort","undefined","match","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2b7f9730.chunk.js","sourcesContent":["import React from 'react';\nimport WebMidi from 'webmidi';\nimport '../App.css';\nconst MidiPorts = props => {\n    const inputEl = document.querySelector('.input-ports');\n\n    WebMidi.enable(function (err) {\n        // If midi ports aren't found, log error\n        if (err) alert('WebMidi could not be enabled.', err);\n        let inputPort = WebMidi.inputs[0]; //WebMidi.getInputByName(inputEl.value);\n        let outputPort = WebMidi.outputs[0];\n\n        props.setInput(inputPort);\n        props.setOutput(outputPort);\n    }, true);\n\n    return (\n        <div className='midi-ports'>\n            <span>Input Port: </span>\n            <select\n                className='ports input-ports'\n                onChange={e => {\n                    props.setInput(WebMidi.getInputByName(e.target.value));\n                }}\n            >\n                {WebMidi.inputs.map(port => (\n                    <option key={port.id} id={port.id}>\n                        {port.name}\n                    </option>\n                ))}\n            </select>\n\n            <span className='output'>Output Port: </span>\n            <select\n                className='ports output-ports'\n                onChange={e => {\n                    props.setOutput(WebMidi.getOutputByName(e.target.value));\n                }}\n            >\n                {WebMidi.outputs.map(port => (\n                    <option key={port.id}>{port.name}</option>\n                ))}\n            </select>\n        </div>\n    );\n};\n\nexport default MidiPorts;\n","import React from 'react';\nimport * as XLSX from 'xlsx';\nimport '../App.css';\n\n//TODO: add more error handling. for instance, if the loaded excel sheet doesn't look right, take user through putting in the name of the sheet, the index of the first cell, etc.\nfunction ExcelReader(props) {\n    function readExcel(file) {\n        const fileReader = new FileReader();\n        fileReader.readAsArrayBuffer(file);\n        let regEx = /xlsx$/;\n\n        fileReader.onload = e => {\n            if (regEx.test(file.name) === false) {\n                alert('ERROR: Incompatible file type.  Please upload a file with an extension of .xlsx');\n                return;\n            }\n            // Set variables\n            const sheetName = prompt('Please enter the name of the sheet');\n            // const sheetName = 'SysEx';\n            const bufferArray = e.target.result;\n            const wb = XLSX.read(bufferArray, { type: 'buffer' });\n\n            const worksheet = wb.Sheets[sheetName];\n            // console.log('worksheet', worksheet);\n            const data = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n\n            // Uncomment to see how we're parsing the data below\n            console.table('data', data);\n\n            let sheetObj = [];\n            const MAX = data.length;\n            let start = 3; // Start of the actual data\n\n            for (let i = start; i < MAX; i++) {\n                sheetObj.push({\n                    index: i - start,\n                    name: data[i][0],\n                    port: data[i][1],\n                    test: data[i][2],\n                    behavior: data[i][3],\n                    sysex: data[i][4],\n                    expected: data[i][5],\n                    expectedLength: null,\n                    response: '',\n                    responseLength: null,\n                    passFail: null,\n                });\n            }\n\n            props.setItems(sheetObj);\n\n            console.log('Worksheet load successful');\n            console.log(sheetObj);\n            props.setHelp(!props.help);\n        };\n\n        fileReader.onerror = e => {\n            alert('unknown error. please retry');\n            fileReader.abort();\n        };\n    }\n\n    // function styleTable() {\n    //     let rows = document.querySelectorAll('td');\n    //     console.log('rows', rows);\n    //     for (let i = 0; i < rows.length; i++) {\n    //         if (rows[i].includes()) {\n    //             rows[i].style.backgroundColor = 'red';\n    //         }\n    //     }\n    // }\n\n    // styleTable();\n    return (\n        <label className='button'>\n            Import Sheet\n            <input\n                type='file'\n                className='file'\n                onChange={e => {\n                    const file = e.target.files[0];\n                    readExcel(file);\n                }}\n            />\n        </label>\n    );\n}\n\nexport default ExcelReader;\n","import React from 'react';\nimport * as XLSX from 'xlsx';\nimport '../App.css';\n\nfunction ExportExcel(props) {\n    // This is the 'items' state, the full data object\n    let newWorkBook = XLSX.utils.book_new(); // create new workbook\n    let resultsSheet = XLSX.utils.json_to_sheet(props.data); //can also use XLSX.utils.sheet_add_json to add to existing\n    XLSX.utils.book_append_sheet(newWorkBook, resultsSheet, 'Sysex Results'); // Add new worksheet to new workbook\n\n    // https://www.youtube.com/watch?v=tKz_ryychBY&list=PLQ9Y_YUSECCg0uiQR-Uj8E2a8fxTelcNB&index=3&t=1197s\n    return (\n        <div>\n            {/* skipHeader: false if we want to remove the header */}\n            <button className='button' onClick={() => XLSX.writeFile(newWorkBook, 'sysex-results.xlsx')}>\n                Export to New Sheet\n            </button>\n        </div>\n    );\n}\n\nexport default ExportExcel;\n","import React from 'react';\n\nfunction Window() {\n    // This will show when the page is loaded.  once a file is imported, it can be accessed via the help button\n    return (\n        <div className='window'>\n            <section className='window__header'>\n                <h4>Welcome to Sysex Tester 9</h4>\n                <p>\n                    Sysex T9 will import your excel sheets and parse the cells for sysex data, where you will be able to send the messages to your\n                    MIDI device while monitoring the response.\n                </p>\n                ________________\n            </section>\n            <section className='window__content'>\n                <p> To use Sysex T9: </p>\n                <p>\n                    {' '}\n                    1. Create an excel sheet based on{' '}\n                    <a href='.' target='_blank'>\n                        this template\n                    </a>\n                </p>\n                <p>\n                    2. Click the Import Sheet button. NOTE: This menu will disappear once a sheet is imported. Access this window again by clicking\n                    [help]{' '}\n                </p>\n                <p>3. Make sure your Input and Output Ports are set to the proper MIDI Device </p>\n                <p> 4. Click Send to send each Sysex message. If the message is successful, the response will be written to the Response cell. </p>\n                <p>\n                    5. Along with the Sysex response message, the amount of bytes sent and received will be written and compared. <br />\n                    If the number of bytes of the response matches the expected number of bytes, the message will be colored green. If the incorrect\n                    amount of bytes are received, the message will be colored red.\n                </p>\n                <p>6. Once finished, [Export to New Sheet] and save the results to your system</p>\n                ________________\n            </section>\n            <section className='window__footer'>\n                <p />\n                If you want to see more data while operating Sysex T9:\n                <p />\n                1. Open up the console on your browser by right clicking anywhere and clicking [Inspect].\n                <p />\n                2. Click on the [Console] tab to get readouts of the data being sent and received.\n                <p />\n                If you want to access this menu again, press the [help] button at any time.\n                <p />\n            </section>\n        </div>\n    );\n}\n\nexport default Window;\n","import { React, useState } from 'react';\nimport Window from './Window';\n\nfunction HelpButton({ help, setHelp }) {\n    return (\n        <div>\n            <button className='button' onClick={() => setHelp(!help)}>\n                help\n            </button>\n        </div>\n    );\n}\n\nexport default HelpButton;\n","// Copy to clipboard\nimport React, { useState } from 'react';\n\nfunction CopyButton({ data, dataLength }) {\n    const [copied, setCopied] = useState('copy');\n\n    function copyText(e) {\n        const text = `${data.join('')}  ${dataLength} bytes`;\n\n        const clipboard = navigator.clipboard;\n\n        if (!navigator.clipboard) {\n            return;\n        }\n        navigator.clipboard.writeText(text);\n        setCopied('copied');\n    }\n\n    return (\n        <div className='copy__container'>\n            <button className={copied === 'copy' ? 'copy button' : 'copy button button__active'} onClick={copyText}>\n                {copied}\n            </button>\n        </div>\n    );\n}\n\nexport default CopyButton;\n","import React, { useState } from 'react';\nimport MidiPorts from './components/MidiPort';\nimport ExcelReader from './components/ReadExcel';\nimport ExportExcel from './components/ExportExcel';\nimport HelpButton from './components/HelpButton';\nimport Window from './components/Window';\nimport CopyButton from './components/CopyButton';\nimport Response from './components/Response';\nimport SendButton from './components/SendButton';\nimport './Header.css';\nimport './App.css';\n\nfunction App() {\n    const [items, setItems] = useState([]);\n    const [input, setInput] = useState();\n    const [output, setOutput] = useState();\n    const [collection, setCollection] = useState([]);\n    const [viewHelp, setViewHelp] = useState(true);\n    const [count, setCount] = useState(0);\n    const [responseState, setResponseState] = useState();\n\n    // function setStorage() {\n    //     localStorage.setItem('items', JSON.stringify(items));\n    //     console.log(localStorage);\n    // }\n\n    // function getStorage() {\n    //     let retrieve = localStorage.getItem('items');\n\n    //     console.log('retrieved', retrieve);\n    //     setTimeout(() => {\n    //         setItems(retrieve);\n    //     }, 10000);\n    // }\n\n    // localStorageCheck();\n    // localStorage.removeItem('items');\n\n    // function addToCollection(e) {\n    //     const value = e.target.value;\n    //     const match = items.filter(item => item.sysex.includes(value));\n    //     setCollection([...collection, match[0]]);\n    // }\n\n    // STEP 1: Send Button is clicked and the event is sent here\n    function clickHandler(e) {\n        setCount(count + 1);\n        const target = parseInt(e.target.id);\n        console.log('click target', target);\n        // TODO: I should be able to just filter based on the target value and not worry about IDs or changing the function to fit the Collection input\n        // Finds cell sysex message based on the target ID, which matches the index\n        let msg = items[target].sysex;\n        let byteArray = msg.split(' ');\n\n        // const value = items\n        //     .filter(cell => cell.index === target)\n        //     .map(cell => cell.sysex)\n        //     .join(' ') // converts it into string\n        //     .split(' '); // converts it into array, but seperated by byte\n        // // value.splice(0, 1); // Removes statusbyte, as that is handled by output.send\n\n        // Converts proper hex format, then to decimal so that message can be read by the computer\n        const message = byteArray.map(el => {\n            el = '0x' + el;\n            return parseInt(Number(el, 10));\n        });\n\n        // Get the status byte and remove it from the message while storing it in this variable\n        const statusByte = message.splice(0, 1);\n        const fullMsg = `${statusByte},${message}`;\n        // Do not send if output does not include the terminator byte\n        // if (!message.includes(247)) {\n        // return alert('Not a valid SysEx message');\n        // }\n        // Send to output if one is available\n\n        if (output) {\n            output.send(statusByte, message);\n            receiveSysex(target); // Full message is sent for easy logging\n\n            console.log(`SENT ${fullMsg} (${fullMsg.length} bytes) to ${output.name} port`);\n        } else {\n            alert('No MIDI output port selected');\n        }\n    }\n\n    // STEP 2: Receive Sysex and log results\n    function receiveSysex(target) {\n        // let testObj = { reply: '', target: target };\n        input.addListener('sysex', 'all', e => {\n            console.log(e);\n            const reply = [...e.data];\n            // Log I/O\n            //BUG: problem here, I think related to the state\n            if (!reply) alert('No SysEx received. Check MIDI Port');\n            // console.group('Success');\n            console.log(`RECEIVED ${reply} (${reply.length} bytes) at ${input.name} port`);\n            console.groupEnd('LOG');\n            // setResponseState(decimalToHex(reply));\n            // Update date\n            // testObj.reply = reply;\n            // console.log(testObj);\n            if (reply) {\n                // return updateData(target, reply);\n                updateData(target, reply);\n            }\n        });\n    }\n\n    function decimalToHex(reply) {\n        const converter = reply.map(el => {\n            el = el.toString(16) + ' ';\n            if (el.length === 2) el = '0' + el;\n            return el.toUpperCase();\n        });\n        return converter;\n    }\n\n    function byteComparison(message) {\n        return message.length;\n    }\n\n    // function updateData(target, response) {\n    //     let something = decimalToHex(response); //\n\n    //     console.log('update target', target);\n    //     // setItems(sheetObj);\n\n    //     setItems(prev => {\n    //         const newItems = prev.map(entry => {\n    //             if (entry.index === target) {\n    //                 entry.response = something;\n    //                 // console.table(items);\n    //                 // console.log('responseState', responseState);\n    //                 // setCount(count + 1);\n    //             }\n    //             return entry;\n    //         });\n    //         target = null;\n    //         return newItems;\n    //     });\n    // }\n\n    // const resultTest = response => {\n    //     console.log('RESPONSE TEST :');\n    //     console.log(response.length);\n    // };\n\n    //TODO: BYTE OVERWRITE\n    // Adds response to the items state\n\n    function updateData(target, response) {\n        const result = items.map(item => {\n            if (item.index === target) {\n                console.group('Data Set');\n                console.log('index', item.index);\n                console.log('target', target);\n\n                // So that the response isn't appended into the cell every time it's retested\n                //TODO: this means the cell won't get new data!\n                if (item.response.indexOf('F0') === -1) {\n                    item.response = '';\n                    item.response += response;\n                }\n\n                //TODO: this function is doing multiple things not described by it's name.  consider breaking up\n                // Sets expected length\n                if (!item.expectedLength) {\n                    item.expectedLength += item.expected.split(' ').length;\n                }\n\n                if (!item.responseLength) {\n                    item.responseLength += byteComparison(response);\n                }\n\n                if (item.responseLength === item.expectedLength) {\n                    item.passFail = 'pass';\n                }\n            }\n\n            return item;\n        });\n\n        console.table(result);\n        console.log('sysex response: ' + response.join(''));\n        setItems(result);\n    }\n    // function addButtons() {\n    //     const sysCells = document.querySelectorAll('.sysex-container');\n    //     let btn = document.createElement('button');\n    //     btn.innerText = 'Send';\n    //     for (let i = 0; i < sysCells.length; i++) {\n    //         sysCells[i].appendChild(btn);\n    //         console.log(i);\n    //     }\n    // }\n    // setInterval(addButtons, 1000);\n\n    return (\n        <div className='container'>\n            <p className='title'>Sysex Tester</p>\n            <div className='utilities'>\n                <ExcelReader setItems={setItems} setHelp={setViewHelp} help={viewHelp} />\n                <ExportExcel data={items} />\n                {/* <ExportExcel data={items} /> */}\n                <MidiPorts setInput={setInput} setOutput={setOutput} input={input} output={output} />\n                {/* <button onClick={setStorage}>set storage</button>\n                <button onClick={getStorage}>get storage</button> */}\n                <HelpButton help={viewHelp} setHelp={setViewHelp} />\n            </div>\n            {viewHelp ? <Window /> : ''}\n            <div className='main-container'>\n                <table className='table-container'>\n                    <thead>\n                        <tr className={items.length > 2 ? 'table-header' : 'invisible'}>\n                            <th className='header__item'>Message Type</th>\n                            <th>Port</th>\n                            <th>Test</th>\n                            <th>Expected Behavior</th>\n                            <th>SysEx to Send</th>\n                            <th>Expected Response</th>\n                            <th>Response</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {items.map((data, index) => (\n                            <tr key={index} className={data.port === undefined ? 'table_section' : 'table_row'}>\n                                <td className='msg_name'>{data.name}</td>\n                                <td className='port'>{data.port}</td>\n                                {/* Sysex Column */}\n                                <td className='description'>{data.test}</td>\n                                <td className='behavior'>{data.behavior}</td>\n                                <td className='sysex-container'>\n                                    <div className='sysex-cell'>\n                                        {data.sysex}\n                                        {/* <SendButton data={data} onClick={clickHandler} /> */}\n                                        <button\n                                            className={data.sysex ? 'send-button button' : 'invisible'}\n                                            id={index}\n                                            // value={data.sysex}\n                                            onClick={clickHandler}\n                                        >\n                                            send{' '}\n                                        </button>\n                                        {/*  Collection Button\n                                        <button onClick={addToCollection} value={data.sysex}>\n                                            Add\n                                        </button> */}\n                                    </div>\n                                </td>\n\n                                {/* Expected */}\n                                <td className='long expected'>\n                                    <div className='overflow'>\n                                        {data.expected}\n                                        <div className={data.passFail === 'pass' ? 'pass' : 'fail'}>\n                                            {data.expectedLength ? `Expected: ${data.expectedLength} bytes` : ''}\n                                        </div>\n                                    </div>\n                                </td>\n                                {/*the regex is to eliminate the commas */}\n                                <td className='long response'>\n                                    <div className='overflow'>\n                                        {/* {data.response.match(/[^,*]/gm)} */}\n\n                                        {data.response}\n                                        {/* <Response data={data.response} index={index} /> */}\n                                        <div className={data.passFail === 'pass' ? 'pass' : 'fail'}>\n                                            {data.responseLength ? `Response: ${data.responseLength} bytes` : ''}\n                                        </div>\n                                    </div>\n\n                                    {data.responseLength > 1 ? (\n                                        <CopyButton data={data.response.match(/[^,*]/gm)} dataLength={data.responseLength} />\n                                    ) : undefined}\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n                {/* <Collection collection={collection} setCollection={setCollection} fn={addToCollection} sendSys={clickHandler} /> */}\n            </div>\n            <footer>© Copyright 2021 John DeTora. All rights reserved.</footer>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}