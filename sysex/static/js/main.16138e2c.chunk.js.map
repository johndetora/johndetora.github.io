{"version":3,"sources":["components/MidiPort.js","components/ReadExcel.js","App.js","index.js"],"names":["MidiPorts","props","WebMidi","enable","err","console","log","inputPort","inputs","outputPort","outputs","setInput","setOutput","className","onChange","e","map","port","name","id","ExcelReader","type","file","fileReader","FileReader","readAsArrayBuffer","onload","bufferArray","target","result","worksheet","XLSX","Sheets","data","sheet_to_json","header","group","table","sheetObj","MAX","length","i","push","index","sysex","expected","expectedLength","response","responseLength","passFail","setItems","readExcel","files","App","useState","items","input","output","clickHandler","parseInt","value","filter","cell","join","split","splice","message","el","Number","send","addListener","reply","item","indexOf","byteComparison","updateData","toString","toUpperCase","decimalToHex","receiveSysex","alert","MidiPort","onClick","match","cols","rows","wrap","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.16138e2c.chunk.js","sourcesContent":["import React from 'react';\nimport WebMidi from 'webmidi';\nimport '../App.css';\nconst MidiPorts = props => {\n    WebMidi.enable(function (err) {\n        // If midi ports aren't found, log error\n        if (err) console.log('WebMidi could not be enabled.', err);\n        // Otherwise log available midi ports\n        // console.log(WebMidi.inputs);\n        // console.log(WebMidi.outputs);\n        let inputPort = WebMidi.inputs[0];\n        let outputPort = WebMidi.outputs[0];\n        props.setInput(inputPort);\n        props.setOutput(outputPort);\n    }, true);\n    return (\n        <div>\n            <span>Input Port: </span>\n            <select className='ports' onChange={e => console.log(e)}>\n                {WebMidi.inputs.map(port => (\n                    <option key={port.id}>{port.name}</option>\n                ))}\n            </select>\n\n            <span className='output'>Output Port: </span>\n            <select className='ports'>\n                {WebMidi.outputs.map(port => (\n                    <option key={port.id}>{port.name}</option>\n                ))}\n            </select>\n        </div>\n    );\n};\n\nexport default MidiPorts;\n","import React from 'react';\nimport * as XLSX from 'xlsx';\nimport '../App.css';\n\nfunction ExcelReader(props) {\n    function readExcel(file) {\n        const fileReader = new FileReader();\n        fileReader.readAsArrayBuffer(file);\n        fileReader.onload = e => {\n            // Set variables\n            // const sheetName = prompt('Please enter the name of the sheet');\n            const sheetName = 'SysEx';\n            const bufferArray = e.target.result;\n            const wb = XLSX.read(bufferArray, { type: 'buffer' });\n\n            const worksheet = wb.Sheets[sheetName];\n            console.log('worksheet', worksheet);\n            const data = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n            console.group();\n            console.table('data', data);\n            const sysexMatch = /F0(.*?)F7/gm;\n            let sheetObj = [];\n            const MAX = data.length;\n            let start = 3; // Start of the actual data\n\n            for (let i = start; i < MAX; i++) {\n                sheetObj.push({\n                    index: i,\n                    name: data[i][0],\n                    port: data[i][1],\n                    sysex: data[i][2],\n                    expected: data[i][3],\n                    expectedLength: null,\n                    response: '',\n                    responseLength: null,\n                    passFail: null,\n                });\n            }\n\n            //    }\n            // // Assign sysex property to regexed sysex\n            // for (let i = 0; i < sheetObj.length; i++) {\n            //     // console.log(sheetObj[i]); // For monitoring input during development\n            //     if (typeof sheetObj[i].description === 'string') {\n            //         sheetObj[i].sysex = sheetObj[i].description.match(sysexMatch);\n            //     }\n            // }\n\n            props.setItems(sheetObj);\n            console.table('sheet object', sheetObj);\n            // Filter out all rows that don't include a valid sysex cell\n            // const onlySysex = sheetObj.filter(cell => cell.sysex !== null);\n            // // Reassign index\n            // for (let i = 0; i < onlySysex.length; i++) {\n            //     onlySysex[i].index = i;\n            // }\n            // props.setItems(onlySysex);\n            console.log('Worksheet load successful');\n        };\n    }\n\n    return (\n        <input\n            type='file'\n            className='file'\n            onChange={e => {\n                const file = e.target.files[0];\n                readExcel(file);\n            }}\n        />\n    );\n}\n\nexport default ExcelReader;\n","import React, { useState } from 'react';\nimport MidiPorts from './components/MidiPort';\nimport ExcelReader from './components/ReadExcel';\nimport Collection from './components/Collection';\nimport ExportExcel from './components/ExportExcel';\nimport './App.css';\n\nfunction App() {\n    const [items, setItems] = useState([]);\n    const [input, setInput] = useState();\n    const [output, setOutput] = useState();\n    const [collection, setCollection] = useState([]);\n\n    function addToCollection(e) {\n        const value = e.target.value;\n        const match = items.filter(item => item.sysex.includes(value));\n        setCollection([...collection, match[0]]);\n    }\n\n    function clickHandler(e) {\n        // console.log(e.target.id);\n        console.log(e);\n        const target = parseInt(e.target.id);\n        // TODO: I should be able to just filter based on the target value and not worry about IDs or changing the function to fit the Collection input\n        // Finds cell sysex message based on the target ID, which matches the index\n        const value = items\n            .filter(cell => cell.index === target)\n            .map(cell => cell.sysex)\n            .join(' ') // converts it into string\n            .split(' '); // converts it into array, but seperated by byte\n        value.splice(0, 1); // Removes statusbyte, as that is handled by output.send\n\n        // converts bytes into integer that's readable by computer,\n        const message = value.map(el => {\n            el = '0x' + el;\n            return parseInt(Number(el, 10));\n        });\n        console.log('sent: (RAW)', message);\n        // Send the sysex\n\n        if (output) {\n            output.send(0xf0, message);\n            receiveSysex(target);\n        } else {\n            alert('No MIDI output port selected');\n        }\n    }\n\n    function receiveSysex(target) {\n        input.addListener('sysex', 'all', function (e) {\n            const reply = [...e.data];\n            console.log('received (RAW):', reply);\n            console.log('response length is', reply.length);\n            // compare length function goes here\n\n            updateData(target, decimalToHex(reply));\n        });\n    }\n\n    function decimalToHex(reply) {\n        const converter = reply.map(el => {\n            el = el.toString(16) + ' ';\n            if (el.length === 2) el = '0' + el;\n            return el.toUpperCase();\n        });\n        return converter;\n    }\n\n    function byteComparison(message) {\n        return message.length;\n    }\n\n    // const resultTest = response => {\n    //     console.log('RESPONSE TEST :');\n    //     console.log(response.length);\n    // };\n\n    // Adds response to the items state\n    function updateData(target, response) {\n        const result = items.map(item => {\n            if (item.index === target) {\n                // So that the response isn't appended into the cell every time it's retested\n                if (item.response.indexOf('F0') === -1) {\n                    item.response += response;\n                }\n                //TODO: this function is doing multiple things not described by it's name.  consider breaking up\n                // Sets expected length\n                if (!item.expectedLength) {\n                    item.expectedLength += item.expected.split(' ').length;\n                }\n\n                if (!item.responseLength) {\n                    item.responseLength += byteComparison(response);\n                }\n\n                if (item.responseLength === item.expectedLength) {\n                    item.passFail = 'pass';\n                    console.table(item);\n                }\n            }\n            return item;\n        });\n\n        console.log('sysex response: ' + response.join(''));\n        setItems(result);\n    }\n\n    return (\n        <div className='container'>\n            <div className='utilities'>\n                <ExcelReader setItems={setItems} />\n                {/* <ExportExcel data={items} /> */}\n                <MidiPorts setInput={setInput} setOutput={setOutput} input={input} output={output} />\n            </div>\n            <div className='main-container'>\n                <table className='table-container'>\n                    <thead>\n                        <tr className='table-header'>\n                            {/*TODO: make these propereties that show up only once loaded */}\n                            <th className='header__item'>Name</th>\n                            <th>Port</th>\n                            <th>Sysex Message</th>\n                            <th>Expected</th>\n                            <th>Response</th>\n                            <th>Pass/Fail</th>\n                            <th>Notes</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {items.map(data => (\n                            <tr key={data.index} className='table_row'>\n                                <td className='msg_name'>{data.name}</td>\n                                <td className='port'>{data.port}</td>\n                                {/* Sysex Column */}\n                                <td className='sysex-container'>\n                                    <div className='sysex-cell'>\n                                        {data.sysex}\n                                        <button className='send-button' id={data.index} value={data.sysex} onClick={clickHandler}>\n                                            test{' '}\n                                        </button>\n                                        {/*  Collection Button\n                                        <button onClick={addToCollection} value={data.sysex}>\n                                            Add\n                                        </button> */}\n                                    </div>\n                                </td>\n\n                                {/*the regex is to eliminate the commas */}\n                                <td className='response'>{data.expected}</td>\n                                <td className='response'>{data.response.match(/[^,*]/gm)}</td>\n                                <td></td>\n                                <td>\n                                    <div className={data.passFail === 'pass' ? 'pass' : 'fail'}>\n                                        {data.responseLength ? `Response: ${data.responseLength} bytes` : ''}\n                                    </div>\n\n                                    <input type='textarea' cols='5' rows='10' wrap='hard' className='notes'></input>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n                {/* <Collection collection={collection} setCollection={setCollection} fn={addToCollection} sendSys={clickHandler} /> */}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}